/*
 * This file is only used for doxygen document generation.
 */


/**
 * @defgroup ulog 日志组件
 *
 * @brief 日志组件接口
 * 
 * ulog 是一个非常简洁、易用的 C/C++ 日志组件，第一个字母 u 代表 μ，即微型的意思。它能做到最低 **ROM<1K,
 * RAM<0.2K** 的资源占用。ulog 不仅有小巧体积，同样也有非常全面的功能，其设计理念参考的是另外一款 C/C++ 
 * 开源日志库：EasyLogger（简称 elog），并在功能和性能等方面做了非常多的改进。主要特性如下：
 * 
 * - 日志输出的 **后端多样化** ，可支持例如：串口、网络，文件、闪存等后端形式；
 * - 日志输出被设计为 **线程安全** 的方式，并支持 **异步输出** 模式；
 * - 日志系统 **高可靠** ，在中断 ISR 、Hardfault 等复杂环境下依旧可用；
 * - 支持 **动态/静态** 开关控制全局的日志输出级别；
 * - 各模块的日志支持 **动态/静态** 设置输出级别；
 * - 日志内容支持按 **关键词及标签** 方式进行全局过滤；
 * - API 和日志格式可兼容 **linux syslog** ；
 * - 支持以 hex 格式 dump 调试数据到日志中；
 * - 兼容 rtdbg （RTT 早期的日志头文件）及 EasyLogger 的日志输出 API。
 *
 * 日志级别代表了日志的重要性，在 ulog 中 **由高到低** ，有如下几个日志级别：
 *
 * | 级别                                | 名称 |  对应宏     |      描述                                                         |
 * | --------------- |---- | ---- |---------------------------------- |
 * | LOG_LVL_ASSERT  | 断言 |  ASSERT() |发生无法处理、致命性的的错误，以至于系统无法继续运行的断言日志 |
 * | LOG_LVL_ERROR   | 错误 | LOG_E(...) | 发生严重的、 **不可修复** 的错误时输出的日志属于错误级别日志  |
 * | LOG_LVL_WARNING | 警告 |  LOG_W(...) |出现一些不太重要的、具有 **可修复性** 的错误时，会输出这些警告日志 |
 * | LOG_LVL_INFO    | 信息 |  LOG_I(...) |给本模块上层使用人员查看的重要提示信息日志，例如：初始化成功，当前工作状态等。该级别日志一般在量产时依旧 **保留** |
 * | LOG_LVL_DBG     | 调试 |  LOG_D(...) |给本模块开发人员查看的调试日志，该级别日志一般在量产时 **关闭** |
 *
 */
